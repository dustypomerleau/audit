# todo: add an admin role for access policies
#
# __source__ references the current object
# __subject__ references the current value

# The majority of values are converted from float to integer by multiplying
# by 100 and truncating. Notable exceptions are Axis and Cct, which require
# no conversion.

### extensions

using extension auth;

module default {

### globals

global cur_surgeon := (assert_single(
    (select Surgeon filter .identity = global ext::auth::ClientTokenIdentity)
));

### scalars

    scalar type Acd extending int32 {
        constraint min_value(0);
        constraint max_value(600);
    }
    
    scalar type Adverse extending enum<Rhexis, Pc, Zonule, Other>;
    
    scalar type Al extending int32 {
        constraint min_value(1200);
        constraint max_value(3800);
    }
    
    scalar type Axis extending int32 {
        constraint min_value(0);
        constraint max_value(179);
    }
    
    scalar type Cct extending int32 {
        constraint min_value(350);
        constraint max_value(650);
    }

    scalar type EmailType extending str {
        # HTML5 allows dotless domains, but ICANN doesn't, so this regex requires the dot.
        constraint regexp("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$");
    }

    scalar type Focus extending enum<Mono, Edof, Multi>;

    scalar type Formula extending enum<
        AscrsKrs,
        Barrett,
        BarrettTrueK,
        Evo,
        Haigis,
        HaigisL,
        HillRbf,
        HofferQ,
        Holladay1,
        Holladay2,
        Kane,
        Okulix,
        Olsen,
        SrkT,
        Other
    >;

    scalar type IolSe extending int32 {
        constraint min_value(-2000);
        constraint max_value(6000);
        constraint expression on (__subject__ % 25 = 0);
    }

    scalar type Kpower extending int32 {
        constraint min_value(3000);
        constraint max_value(6500);
    }

    scalar type Lt extending int32 {
        constraint min_value(200);
        constraint max_value(800);
    }
    
    scalar type Main extending int32 {
        constraint min_value(100);
        constraint max_value(600);
    }

    scalar type RefCylPower extending int32 {
        constraint min_value(-1000);
        constraint max_value(1000);
        constraint expression on (__subject__ % 25 = 0);
    }

    scalar type RefSph extending int32 {
        constraint min_value(-2000);
        constraint max_value(2000);
        constraint expression on (__subject__ % 25 = 0);
    }

    scalar type SiaPower extending int32 {
        constraint min_value(0);
        constraint max_value(200);
    }

    scalar type Side extending enum<Right, Left>;

    scalar type TargetCylPower extending int32 {
        constraint min_value(0);
        constraint max_value(600);
    }
    
    scalar type TargetSe extending int32 {
        constraint min_value(-600);
        constraint max_value(200);
    }

    scalar type ToricPower extending int32 {
        constraint min_value(100);
        constraint max_value(2000);
        constraint expression on (__subject__ % 25 = 0);
    }

    scalar type VaDen extending int32 { constraint min_value(1); }

    scalar type VaNum extending int32 {
        constraint min_value(0);
        constraint max_value(2000);
    }
    
    scalar type Wtw extending int32 {
        constraint min_value(800);
        constraint max_value(1400);
    }

### abstract objects

    abstract type SoftCreate {
        required created_at: datetime {
            default := datetime_current();
            readonly := true;
        }
    }

### objects

    type Biometry extending SoftCreate {
        required al: Al;
        required ks: Ks { on source delete delete target if orphan; }
        required acd: Acd;
        required lt: Lt;
        cct: Cct;
        wtw: Wtw;
    }

    type AfterVa extending SoftCreate {
        best: Va { on source delete delete target if orphan; }
        required raw: Va { on source delete delete target if orphan; }
    }
    
    type BeforeVa extending SoftCreate {
        required best: Va { on source delete delete target if orphan; }
        raw: Va { on source delete delete target if orphan; }
    }

    # case is a reserved keyword
    type Cas extending SoftCreate {
        required side: Side;
        biometry: Biometry { on source delete delete target if orphan; }
        required target: Target { on source delete delete target if orphan; }

        required year: int32 {
            default := <int32>datetime_get(datetime_current(), "year");
            constraint min_value(2000);
            constraint max_value(2100);
        }

        main: Main;
        sia: Sia { on source delete delete target if orphan; }
        iol: OpIol { on source delete delete target if orphan; }
        adverse: Adverse;
        required va: OpVa { on source delete delete target if orphan; }
        required refraction: OpRefraction { on source delete delete target if orphan; }
    }

    type Iol extending SoftCreate {
        required model: str { constraint exclusive; }
        name: str;
        company: str;
        required focus: Focus { default := Focus.Mono; }
        toric: ToricPower;
    }

    type K extending SoftCreate {
        required power: Kpower;
        required axis: Axis;
    }

    # Multi-hop constraint limitation prevents enforcing that .flat.power <= .steep.power,
    # so this must be checked prior to insertion.
    type Ks extending SoftCreate {
        required flat: K { on source delete delete target if orphan; }
        required steep: K { on source delete delete target if orphan; }
    }

    type OpIol extending SoftCreate {
        required iol: Iol;
        required se: IolSe;
        axis: Axis;
    }

    type OpRefraction extending SoftCreate {
        required before: Refraction { on source delete delete target if orphan; }
        required after: Refraction { on source delete delete target if orphan; }
    }
    
    type OpVa extending SoftCreate {
        required before: BeforeVa { on source delete delete target if orphan; }
        required after: AfterVa { on source delete delete target if orphan; }
    }

    type RefCyl extending SoftCreate {
        required power: RefCylPower;
        required axis: Axis;
    }

    type Refraction extending SoftCreate {
        required sph: RefSph;
        cyl: RefCyl;
    }

    type Sia extending SoftCreate {
        required power: SiaPower;
        required axis: Axis;
    }

    type Site extending SoftCreate {
        required name: str { constraint exclusive; }
    }

    type Surgeon extending SoftCreate {
        required identity: ext::auth::Identity { constraint exclusive; }
        required email: EmailType { constraint exclusive; }
        terms: datetime; # the date terms were agreed by the surgeon
        first_name: str;
        last_name: str;
        defaults: SurgeonDefaults { on source delete delete target if orphan; }
        sia: SurgeonSia { on source delete delete target if orphan; }
        multi cases := .<surgeon[is SurgeonCas];
    }

    # Cascading deletes will give users a greater sense of agency:
    # 1. If the surgeon deletes their account, we remove the Surgeon.
    # 2. If we remove the Surgeon, we also remove their SurgeonCas es.
    # 3. If we remove a SurgeonCas, we also remove the linked Cas.
    # This allows someone to ghost completely, along with all the data they have entered. 
    type SurgeonCas extending SoftCreate {
        required surgeon: Surgeon { on target delete delete source; }
        required urn: str;
        # Duplicating the side here is necessary to enforce the exclusive constraint.
        # Side is available on the Cas, but double-hops aren't permitted in constraints.
        # Without the constraint, we risk accidentally entering the same surgery multiple
        # times.
        required side: Side;
        required date: cal::local_date;
        site: Site;

        required cas: Cas {
            constraint exclusive;
            on source delete delete target if orphan;
        }

        constraint exclusive on ((.surgeon, .urn, .side));
        
        # When creating a plot, the surgeon accesses their own `SurgeonCas`es (which are 
        # restricted) but accesses others' `Cas`es (which are unrestricted) for comparison.
        access policy surgeon_full_access
            allow all using (.surgeon ?= global cur_surgeon) {
                errmessage := "Only the surgeon has access to their cases."
            };
    }

    type SurgeonDefaults extending SoftCreate {
        site: Site;
        iol: Iol;
        formula: Formula;
        required custom_constant: bool { default := false; }
        main: Main;
    }

    type SurgeonSia extending SoftCreate {
        required right: Sia { on source delete delete target if orphan; }
        required left: Sia { on source delete delete target if orphan; }
    }

    type Target extending SoftCreate {
        formula: Formula;
        required custom_constant: bool { default := false; }
        required se: TargetSe;
        cyl: TargetCyl { on source delete delete target if orphan; }
    }

    type TargetCyl extending SoftCreate {
        required power: TargetCylPower;
        required axis: Axis;
    }

    type Va extending SoftCreate {
        required num: VaNum;
        required den: VaDen;
    }
}

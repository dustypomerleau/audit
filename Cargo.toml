[package]
edition = "2024"
name = "audit"
version = "0.1.0"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
axum = { version = "0.8.6", optional = true }
axum-extra = { version = "0.10.3", features = ["cookie", "typed-header"], optional = true }
axum-macros = { version = "0.5.0", optional = true }
base64ct = { version = "1.8.0", features = ["alloc"], optional = true }
# todo: switch to jiff
chrono = { version = "0.4.42", features = ["serde"] }
console_error_panic_hook = "0.1.7"
dotenvy = "0.15.7"
futures = "0.3.31"
garde = { version = "0.22.0", features = ["derive", "email"] }
gel-derive = { version = "0.7.4", optional = true }
gel-protocol = { version = "0.9.2", features = ["chrono"], optional = true }
gel-tokio = { version = "0.11.0", optional = true }
http = "1.3.1"
leptos = { version = "0.8.10", features = ["nightly"] }
leptos_axum = { version = "0.8.6", optional = true }
leptos_meta = { version = "0.8.5" }
leptos_router = { version = "0.8.8", features = ["nightly"] }
markdown = { version = "1.0.0", optional = true }
# plotly = { version = "0.13.5", features = ["static_export_default"], optional = true }
plotly = { git = "https://github.com/plotly/plotly.rs", features = [
  "static_export_default",
], optional = true }
rand = { version = "0.9.2", optional = true }
reactive_stores = "0.2.5"
reqwest = { version = "0.12.24", features = ["blocking", "json"] }
serde = { version = "1.0.228", features = ["derive"] }
serde_json = "1.0.145"
sha2 = { version = "0.10.9", default-features = false, optional = true }
thiserror = "2.0.17"
tokio = { version = "1.47.1", features = ["macros", "rt-multi-thread"], optional = true }
tower = { version = "0.5.2", features = ["util"], optional = true }
tower-http = { version = "0.6.6", features = ["fs"], optional = true }
tracing = { version = "0.1.41", optional = true }
uuid = { version = "1.18.1", features = ["serde"] }
wasm-bindgen = "=0.2.104"

[features]
hydrate = ["leptos/hydrate"]
ssr = [
  "dep:axum",
  "dep:axum-extra",
  "dep:axum-macros",
  "dep:base64ct",
  "dep:gel-derive",
  "dep:gel-protocol",
  "dep:gel-tokio",
  "dep:leptos_axum",
  "dep:markdown",
  "dep:plotly",
  "dep:rand",
  "dep:sha2",
  "dep:tokio",
  "dep:tower",
  "dep:tower-http",
  "dep:tracing",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
codegen-units = 1
inherits = "release"
lto = true
opt-level = 'z'
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "audit"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(wasm_bindgen_unstable_test_coverage)'] }

# note: attempting to compile plotly for wasm throws:
# 
# Could not find openssl via pkg-config:
#  pkg-config has not been configured to support cross-compilation.
#
#  Install a sysroot for the target platform and configure it via
#  PKG_CONFIG_SYSROOT_DIR and PKG_CONFIG_PATH, or install a
#  cross-compiling wrapper for pkg-config and set it via
#  PKG_CONFIG environment variable.
#
#  cargo:warning=Could not find directory of OpenSSL installation, and this `-sys` crate cannot proceed without this knowledge. If OpenSSL is installed and this crate had trouble finding it,  you can set the `OPENSSL_DIR` environment variable for the compilation process. See stderr section below for further information.
#
#  --- stderr
#
#
#  Could not find directory of OpenSSL installation, and this `-sys` crate cannot
#  proceed without this knowledge. If OpenSSL is installed and this crate had
#  trouble finding it,  you can set the `OPENSSL_DIR` environment variable for the
#  compilation process.
#
#  Make sure you also have the development packages of openssl installed.
#  For example, `libssl-dev` on Ubuntu or `openssl-devel` on Fedora.
#
#  If you're in a situation where you think the directory *should* be found
#  automatically, please open a bug at https://github.com/sfackler/rust-openssl
#  and include information about your system as well as this message.
#
#  $HOST = aarch64-apple-darwin
#  $TARGET = wasm32-unknown-unknown
#  openssl-sys = 0.9.109
#
